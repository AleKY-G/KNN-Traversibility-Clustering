Moons 1
datasets.make_moons(500,noise=0.05,random_state=0)

Moons 2
datasets.make_moons(500,noise=0.11,random_state=0)

Circles 1
datasets.make_circles(500,noise=0.05,factor=0.5,random_state=0)

Circles 2
datasets.make_circles(500,noise=0.11,factor=0.5,random_state=0) 

Densities 1
stdevs = [0.5,3,0.5]
proportions = {0:100, 1:500, 2:100}
centers = [(-10,0),(0,0),(10,0)]
get_dataset(proportions,centers,stdevs)

Densities 2
stdevs = [0.7,2.7,0.7]
proportions = {0:200, 1:500, 2:200}
centers = [(-7,0),(0,0),(7,0)]
get_dataset(proportions,centers,stdevs)




Get Dataset Method:
https://machinelearningmastery.com/how-to-develop-an-intuition-skewed-class-distributions/ 
def get_dataset(proportions, centers, stdevs):
    # determine the number of classes
    n_classes = len(proportions)
    # determine the number of examples to generate for each class
    largest = max([v for k,v in proportions.items()])
    n_samples = largest * n_classes
    # create dataset
    X, y = make_blobs(n_samples=n_samples, centers=centers, n_features=2, random_state=1, cluster_std=stdevs)
    # collect the examples
    X_list, y_list = list(), list()
    for k,v in proportions.items():
        row_ix = np.where(y == k)[0]
        selected = row_ix[:v]
        X_list.append(X[selected, :])
        y_list.append(y[selected])
    return np.vstack(X_list), np.hstack(y_list)